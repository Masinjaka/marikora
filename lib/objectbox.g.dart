// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/entities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2602984334289566760),
      name: 'Personnel',
      lastPropertyId: const IdUid(9, 5722172106836039662),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7077769445560262103),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7254050316861891029),
            name: 'nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3360175331603172899),
            name: 'prenom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 746158946813334314),
            name: 'poste',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9122061757092086135),
            name: 'carte',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1186596301571784995),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6544429278499263680),
            name: 'cin',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1817189076852456181),
            name: 'heures',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5722172106836039662),
            name: 'etat',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8079170203305957759),
      name: 'Niditra',
      lastPropertyId: const IdUid(6, 6426654201503342840),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3135672712395030429),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8042680574012064755),
            name: 'nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4825789955486393249),
            name: 'prenom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1422129463388648525),
            name: 'carte',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7836410414314320044),
            name: 'arrive',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6426654201503342840),
            name: 'date',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7921274905158969601),
      name: 'Nivoaka',
      lastPropertyId: const IdUid(6, 7468564270273881897),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1709214817072305659),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8930572989387675495),
            name: 'nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8714898116778336463),
            name: 'prenom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4860841808641285991),
            name: 'carte',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7842783508702900691),
            name: 'depart',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7468564270273881897),
            name: 'date',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 3593160671929806614),
      name: 'Utilisateur',
      lastPropertyId: const IdUid(7, 3806844816609321382),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8405319639232616076),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1457072512035712602),
            name: 'nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7874984678206380121),
            name: 'prenom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5609166123743571303),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6394148004508724053),
            name: 'mdp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1606256628569385189),
            name: 'question',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3806844816609321382),
            name: 'reponse',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4165073412939986839),
      name: 'HeureContinue',
      lastPropertyId: const IdUid(4, 3508654399870893386),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2025280537911237298),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2248625114337046322),
            name: 'carte',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3103215695945775113),
            name: 'he',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3508654399870893386),
            name: 'hs',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 2533501205040204988),
      name: 'HeureDiscontinusDouble',
      lastPropertyId: const IdUid(6, 5897590446904250132),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5742983012856787344),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6430052453462471126),
            name: 'carte',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7382978598763394963),
            name: 'he1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5170436889188363463),
            name: 'he2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5382701792434143636),
            name: 'hs1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5897590446904250132),
            name: 'hs2',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 6327487748613142994),
      name: 'Historique',
      lastPropertyId: const IdUid(7, 8924151068343489867),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2091689913042379711),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6186356582309243608),
            name: 'nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4176575808658186968),
            name: 'prenom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3483661666817328397),
            name: 'eve',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2490167119925937086),
            name: 'heure',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 662997989316255196),
            name: 'carte',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8924151068343489867),
            name: 'photo',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 855868862793689653),
      name: 'Ip',
      lastPropertyId: const IdUid(2, 2227229746240029192),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8696608528543169826),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2227229746240029192),
            name: 'ip',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 855868862793689653),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Personnel: EntityDefinition<Personnel>(
        model: _entities[0],
        toOneRelations: (Personnel object) => [],
        toManyRelations: (Personnel object) => {},
        getId: (Personnel object) => object.id,
        setId: (Personnel object, int id) {
          object.id = id;
        },
        objectToFB: (Personnel object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          final prenomOffset = fbb.writeString(object.prenom);
          final posteOffset = fbb.writeString(object.poste);
          final carteOffset = fbb.writeString(object.carte);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nomOffset);
          fbb.addOffset(2, prenomOffset);
          fbb.addOffset(3, posteOffset);
          fbb.addOffset(4, carteOffset);
          fbb.addOffset(5, photoOffset);
          fbb.addInt64(6, object.cin);
          fbb.addInt64(7, object.heures);
          fbb.addInt64(8, object.etat);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final prenomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final posteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final carteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final photoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final cinParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final heuresParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final etatParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = Personnel(
              nom: nomParam,
              prenom: prenomParam,
              poste: posteParam,
              carte: carteParam,
              photo: photoParam,
              cin: cinParam,
              heures: heuresParam,
              etat: etatParam,
              id: idParam);

          return object;
        }),
    Niditra: EntityDefinition<Niditra>(
        model: _entities[1],
        toOneRelations: (Niditra object) => [],
        toManyRelations: (Niditra object) => {},
        getId: (Niditra object) => object.id,
        setId: (Niditra object, int id) {
          object.id = id;
        },
        objectToFB: (Niditra object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          final prenomOffset = fbb.writeString(object.prenom);
          final carteOffset = fbb.writeString(object.carte);
          final arriveOffset = fbb.writeString(object.arrive);
          final dateOffset = fbb.writeString(object.date);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nomOffset);
          fbb.addOffset(2, prenomOffset);
          fbb.addOffset(3, carteOffset);
          fbb.addOffset(4, arriveOffset);
          fbb.addOffset(5, dateOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final prenomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final carteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final arriveParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = Niditra(
              nom: nomParam,
              prenom: prenomParam,
              carte: carteParam,
              arrive: arriveParam,
              date: dateParam,
              id: idParam);

          return object;
        }),
    Nivoaka: EntityDefinition<Nivoaka>(
        model: _entities[2],
        toOneRelations: (Nivoaka object) => [],
        toManyRelations: (Nivoaka object) => {},
        getId: (Nivoaka object) => object.id,
        setId: (Nivoaka object, int id) {
          object.id = id;
        },
        objectToFB: (Nivoaka object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          final prenomOffset = fbb.writeString(object.prenom);
          final carteOffset = fbb.writeString(object.carte);
          final departOffset = fbb.writeString(object.depart);
          final dateOffset = fbb.writeString(object.date);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nomOffset);
          fbb.addOffset(2, prenomOffset);
          fbb.addOffset(3, carteOffset);
          fbb.addOffset(4, departOffset);
          fbb.addOffset(5, dateOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final prenomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final carteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final departParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = Nivoaka(
              nom: nomParam,
              prenom: prenomParam,
              carte: carteParam,
              depart: departParam,
              date: dateParam,
              id: idParam);

          return object;
        }),
    Utilisateur: EntityDefinition<Utilisateur>(
        model: _entities[3],
        toOneRelations: (Utilisateur object) => [],
        toManyRelations: (Utilisateur object) => {},
        getId: (Utilisateur object) => object.id,
        setId: (Utilisateur object, int id) {
          object.id = id;
        },
        objectToFB: (Utilisateur object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          final prenomOffset = fbb.writeString(object.prenom);
          final usernameOffset = fbb.writeString(object.username);
          final mdpOffset = fbb.writeString(object.mdp);
          final questionOffset = fbb.writeString(object.question);
          final reponseOffset = fbb.writeString(object.reponse);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nomOffset);
          fbb.addOffset(2, prenomOffset);
          fbb.addOffset(3, usernameOffset);
          fbb.addOffset(4, mdpOffset);
          fbb.addOffset(5, questionOffset);
          fbb.addOffset(6, reponseOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final prenomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final questionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final mdpParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final reponseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = Utilisateur(
              nom: nomParam,
              prenom: prenomParam,
              username: usernameParam,
              question: questionParam,
              mdp: mdpParam,
              reponse: reponseParam,
              id: idParam);

          return object;
        }),
    HeureContinue: EntityDefinition<HeureContinue>(
        model: _entities[4],
        toOneRelations: (HeureContinue object) => [],
        toManyRelations: (HeureContinue object) => {},
        getId: (HeureContinue object) => object.id,
        setId: (HeureContinue object, int id) {
          object.id = id;
        },
        objectToFB: (HeureContinue object, fb.Builder fbb) {
          final carteOffset = fbb.writeString(object.carte);
          final heOffset = fbb.writeString(object.he);
          final hsOffset = fbb.writeString(object.hs);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, carteOffset);
          fbb.addOffset(2, heOffset);
          fbb.addOffset(3, hsOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final carteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final heParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final hsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = HeureContinue(
              carte: carteParam, he: heParam, hs: hsParam, id: idParam);

          return object;
        }),
    HeureDiscontinusDouble: EntityDefinition<HeureDiscontinusDouble>(
        model: _entities[5],
        toOneRelations: (HeureDiscontinusDouble object) => [],
        toManyRelations: (HeureDiscontinusDouble object) => {},
        getId: (HeureDiscontinusDouble object) => object.id,
        setId: (HeureDiscontinusDouble object, int id) {
          object.id = id;
        },
        objectToFB: (HeureDiscontinusDouble object, fb.Builder fbb) {
          final carteOffset = fbb.writeString(object.carte);
          final he1Offset = fbb.writeString(object.he1);
          final he2Offset = fbb.writeString(object.he2);
          final hs1Offset = fbb.writeString(object.hs1);
          final hs2Offset = fbb.writeString(object.hs2);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, carteOffset);
          fbb.addOffset(2, he1Offset);
          fbb.addOffset(3, he2Offset);
          fbb.addOffset(4, hs1Offset);
          fbb.addOffset(5, hs2Offset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final carteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final he1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final he2Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final hs1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final hs2Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = HeureDiscontinusDouble(
              carte: carteParam,
              he1: he1Param,
              he2: he2Param,
              hs1: hs1Param,
              hs2: hs2Param,
              id: idParam);

          return object;
        }),
    Historique: EntityDefinition<Historique>(
        model: _entities[6],
        toOneRelations: (Historique object) => [],
        toManyRelations: (Historique object) => {},
        getId: (Historique object) => object.id,
        setId: (Historique object, int id) {
          object.id = id;
        },
        objectToFB: (Historique object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          final prenomOffset = fbb.writeString(object.prenom);
          final eveOffset = fbb.writeString(object.eve);
          final heureOffset = fbb.writeString(object.heure);
          final carteOffset = fbb.writeString(object.carte);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nomOffset);
          fbb.addOffset(2, prenomOffset);
          fbb.addOffset(3, eveOffset);
          fbb.addOffset(4, heureOffset);
          fbb.addOffset(5, carteOffset);
          fbb.addOffset(6, photoOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final prenomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final photoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final eveParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final heureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final carteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = Historique(
              nom: nomParam,
              prenom: prenomParam,
              photo: photoParam,
              eve: eveParam,
              heure: heureParam,
              carte: carteParam,
              id: idParam);

          return object;
        }),
    Ip: EntityDefinition<Ip>(
        model: _entities[7],
        toOneRelations: (Ip object) => [],
        toManyRelations: (Ip object) => {},
        getId: (Ip object) => object.id,
        setId: (Ip object, int id) {
          object.id = id;
        },
        objectToFB: (Ip object, fb.Builder fbb) {
          final ipOffset = fbb.writeString(object.ip);
          fbb.startTable(3);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, ipOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final ipParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = Ip(ip: ipParam, id: idParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Personnel] entity fields to define ObjectBox queries.
class Personnel_ {
  /// see [Personnel.id]
  static final id = QueryIntegerProperty<Personnel>(_entities[0].properties[0]);

  /// see [Personnel.nom]
  static final nom = QueryStringProperty<Personnel>(_entities[0].properties[1]);

  /// see [Personnel.prenom]
  static final prenom =
      QueryStringProperty<Personnel>(_entities[0].properties[2]);

  /// see [Personnel.poste]
  static final poste =
      QueryStringProperty<Personnel>(_entities[0].properties[3]);

  /// see [Personnel.carte]
  static final carte =
      QueryStringProperty<Personnel>(_entities[0].properties[4]);

  /// see [Personnel.photo]
  static final photo =
      QueryStringProperty<Personnel>(_entities[0].properties[5]);

  /// see [Personnel.cin]
  static final cin =
      QueryIntegerProperty<Personnel>(_entities[0].properties[6]);

  /// see [Personnel.heures]
  static final heures =
      QueryIntegerProperty<Personnel>(_entities[0].properties[7]);

  /// see [Personnel.etat]
  static final etat =
      QueryIntegerProperty<Personnel>(_entities[0].properties[8]);
}

/// [Niditra] entity fields to define ObjectBox queries.
class Niditra_ {
  /// see [Niditra.id]
  static final id = QueryIntegerProperty<Niditra>(_entities[1].properties[0]);

  /// see [Niditra.nom]
  static final nom = QueryStringProperty<Niditra>(_entities[1].properties[1]);

  /// see [Niditra.prenom]
  static final prenom =
      QueryStringProperty<Niditra>(_entities[1].properties[2]);

  /// see [Niditra.carte]
  static final carte = QueryStringProperty<Niditra>(_entities[1].properties[3]);

  /// see [Niditra.arrive]
  static final arrive =
      QueryStringProperty<Niditra>(_entities[1].properties[4]);

  /// see [Niditra.date]
  static final date = QueryStringProperty<Niditra>(_entities[1].properties[5]);
}

/// [Nivoaka] entity fields to define ObjectBox queries.
class Nivoaka_ {
  /// see [Nivoaka.id]
  static final id = QueryIntegerProperty<Nivoaka>(_entities[2].properties[0]);

  /// see [Nivoaka.nom]
  static final nom = QueryStringProperty<Nivoaka>(_entities[2].properties[1]);

  /// see [Nivoaka.prenom]
  static final prenom =
      QueryStringProperty<Nivoaka>(_entities[2].properties[2]);

  /// see [Nivoaka.carte]
  static final carte = QueryStringProperty<Nivoaka>(_entities[2].properties[3]);

  /// see [Nivoaka.depart]
  static final depart =
      QueryStringProperty<Nivoaka>(_entities[2].properties[4]);

  /// see [Nivoaka.date]
  static final date = QueryStringProperty<Nivoaka>(_entities[2].properties[5]);
}

/// [Utilisateur] entity fields to define ObjectBox queries.
class Utilisateur_ {
  /// see [Utilisateur.id]
  static final id =
      QueryIntegerProperty<Utilisateur>(_entities[3].properties[0]);

  /// see [Utilisateur.nom]
  static final nom =
      QueryStringProperty<Utilisateur>(_entities[3].properties[1]);

  /// see [Utilisateur.prenom]
  static final prenom =
      QueryStringProperty<Utilisateur>(_entities[3].properties[2]);

  /// see [Utilisateur.username]
  static final username =
      QueryStringProperty<Utilisateur>(_entities[3].properties[3]);

  /// see [Utilisateur.mdp]
  static final mdp =
      QueryStringProperty<Utilisateur>(_entities[3].properties[4]);

  /// see [Utilisateur.question]
  static final question =
      QueryStringProperty<Utilisateur>(_entities[3].properties[5]);

  /// see [Utilisateur.reponse]
  static final reponse =
      QueryStringProperty<Utilisateur>(_entities[3].properties[6]);
}

/// [HeureContinue] entity fields to define ObjectBox queries.
class HeureContinue_ {
  /// see [HeureContinue.id]
  static final id =
      QueryIntegerProperty<HeureContinue>(_entities[4].properties[0]);

  /// see [HeureContinue.carte]
  static final carte =
      QueryStringProperty<HeureContinue>(_entities[4].properties[1]);

  /// see [HeureContinue.he]
  static final he =
      QueryStringProperty<HeureContinue>(_entities[4].properties[2]);

  /// see [HeureContinue.hs]
  static final hs =
      QueryStringProperty<HeureContinue>(_entities[4].properties[3]);
}

/// [HeureDiscontinusDouble] entity fields to define ObjectBox queries.
class HeureDiscontinusDouble_ {
  /// see [HeureDiscontinusDouble.id]
  static final id =
      QueryIntegerProperty<HeureDiscontinusDouble>(_entities[5].properties[0]);

  /// see [HeureDiscontinusDouble.carte]
  static final carte =
      QueryStringProperty<HeureDiscontinusDouble>(_entities[5].properties[1]);

  /// see [HeureDiscontinusDouble.he1]
  static final he1 =
      QueryStringProperty<HeureDiscontinusDouble>(_entities[5].properties[2]);

  /// see [HeureDiscontinusDouble.he2]
  static final he2 =
      QueryStringProperty<HeureDiscontinusDouble>(_entities[5].properties[3]);

  /// see [HeureDiscontinusDouble.hs1]
  static final hs1 =
      QueryStringProperty<HeureDiscontinusDouble>(_entities[5].properties[4]);

  /// see [HeureDiscontinusDouble.hs2]
  static final hs2 =
      QueryStringProperty<HeureDiscontinusDouble>(_entities[5].properties[5]);
}

/// [Historique] entity fields to define ObjectBox queries.
class Historique_ {
  /// see [Historique.id]
  static final id =
      QueryIntegerProperty<Historique>(_entities[6].properties[0]);

  /// see [Historique.nom]
  static final nom =
      QueryStringProperty<Historique>(_entities[6].properties[1]);

  /// see [Historique.prenom]
  static final prenom =
      QueryStringProperty<Historique>(_entities[6].properties[2]);

  /// see [Historique.eve]
  static final eve =
      QueryStringProperty<Historique>(_entities[6].properties[3]);

  /// see [Historique.heure]
  static final heure =
      QueryStringProperty<Historique>(_entities[6].properties[4]);

  /// see [Historique.carte]
  static final carte =
      QueryStringProperty<Historique>(_entities[6].properties[5]);

  /// see [Historique.photo]
  static final photo =
      QueryStringProperty<Historique>(_entities[6].properties[6]);
}

/// [Ip] entity fields to define ObjectBox queries.
class Ip_ {
  /// see [Ip.id]
  static final id = QueryIntegerProperty<Ip>(_entities[7].properties[0]);

  /// see [Ip.ip]
  static final ip = QueryStringProperty<Ip>(_entities[7].properties[1]);
}
